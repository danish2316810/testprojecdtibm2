const cds = require("@sap/cds")


module.exports=onCreateErrorRecord

async function onCreateErrorRecord(req) {
    try{
      const {data}=req.data
      const cdsEntityList=cds.entities("app.dan");
      const errorPayload=await formErrorData(data.interface,data.fields,cdsEntityList);
      const interfaceData=cdsEntityList.InterfaceData;
      const isFieldMatch= validateErrorFields(errorPayload)
  
    
      
    }catch(error){

    }
}
async function validateErrorFields(errorPayload ) {
  let isFieldMatch={}
  if(errorPayload.cdsEntityFullName){
    const cdsEntityFieldsObject=errorPayload.cdsEntityFieldsObject;
      const keysPayloadData=Object.keys(errorPayload.payloaddata);
      isFieldMatch.bNoError=true;
      keysPayloadData.forEach(item=>{
        if(cdsEntityFieldsObject[item]){
          // do nothing
        }else{
          isFieldMatch.bNoError=false;
          isFieldMatch.error=("field is not present")
        }
      })
      if(isFieldMatch.bNoError){
        isFieldMatch=validateValueOfErrorPayload(errorPayload)
        
      }
      
  }else{
    isFieldMatch.bNoError=false;
    isFieldMatch.error="endpoint enity is not available"
  }
  return isFieldMatch;  
}

async function validateValueOfErrorPayload(errorPayload) {
  const isFieldsHasValue={}
  const cdsEntityFieldsObject=errorPayload.cdsEntityFieldsObject;
  const payloadData=errorPayload.payloaddata;
  const cdsEntitykeys=Object.keys(errorPayload.cdsEntityFieldsObject)
  // skip validation for autogenerated or internal code assigned/yet to be assign fields
  const autogenCodeAssinValues=["ID", "interfaceUUID"]
  isFieldsHasValue.bNoError=true;
  cdsEntitykeys.forEach(item=>{
    if(cdsEntityFieldsObject[item]){
      const isSkipField=autogenCodeAssinValues.find(item1=>{
        if(item1===cdsEntityFieldsObject[item].name){
          return true;
        }else{
          return false;
        }

      })
      if(cdsEntityFieldsObject[item].hasOwnProperty("key")){
        validateValue(cdsEntityFieldsObject,payloadData,item,isFieldsHasValue,isSkipField,)
      }else if(cdsEntityFieldsObject[item].hasOwnProperty("notNull")&& cdsEntityFieldsObject[item]!=="cds.Association"){
        validateValue()
      }
    }
  })
  
}
async function validateValue(cdsEntityFieldsObject,payloadData,item,isFieldsHasValue,isSkipField) {

  
}
async function formErrorData(endPoint,httpPayloadFiledsdata,cdsEntityList) {
  const payload={}
  if(endPoint==="Contract"){
    payload.cdsEntityFullName=cdsEntityList.ContractErrors.name;
    payload.cdsEntityFieldsObject=cdsEntityList.ContractErrors.elements;
    payload.payloaddata=await formBtpTableErrorPayload(httpPayloadFiledsdata)
  }
  return payload;
}
async function formBtpTableErrorPayload(data) {
  const fieldsDataWithoutKeysAndValue={}
  data.forEach(item=>{
    fieldsDataWithoutKeysAndValue[item.keys]=item.value
  })
return fieldsDataWithoutKeysAndValue;
  
}